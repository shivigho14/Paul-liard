class Heap(object):
    """"
    Attributes:
        heap: List representation of the heap
        compare(p, c): comparator function, returns true if the relation between p and c is parent-child
        in simpler words returns boolean if p lt c (p < c)
    
     """
    def __init__(self, heap=None, compare=operator.lt):
     # Keeping the option to take a normal array
        self.heap = [] if heap is None else heap
        self.compare = compare
    def __repr__(self):
        return 'Student Records \n{!r}\n'.format(self.heap)

    def _inv_heapify(self, child_index):
    """
    Do heapifying starting from floor(N/2) till it reaches the root.
    """
    heap, compare = self.heap, self.compare
        child = child_index
        while child > 0:
    # Start from floor(N / 2)  
            parent = child // 2
            # Is there any child node smaller than parent
            if compare(heap[parent], heap[child]):
                # If no then return 
                return
            # Else swap parent and child as smaller one should always pop up
            heap[parent], heap[child] = heap[child], heap[parent]
            child = parent
     def _heapify(self, parent_index):
        """
        Do heepifying starting from the root.
        """
        heap, compare = self.heap, self.compare
        length = len(heap)
        if length == 1:
            return
        parent = parent_index
        while 2 * parent < length:
            child = 2 * parent
            if child + 1 < length and compare(heap[child + 1], heap[child]):
                child += 1
            if compare(heap[parent], heap[child]):
                return
            heap[parent], heap[child] = heap[child], heap[parent]
            parent = child
            
    def del_min(self):
        heap = self.heap
        last_element = heap.pop()
        if not heap:
            return last_element
        item = heap[0]
        heap[0] = last_element
        self._heapify(0)
        return item
   
   def min(self):
        if not self.heap:
            return None
        return self.heap[0]
   
   def add(self, element):
        self.heap.append(element)
        self._inv_heapify(len(self.heap) - 1) 
  
# Student class to maintain records related functions
class StudentDatabase:
    def __init__(self):
        self.database = Heap()   

   def validate_input(self, student_number, course_id):
        if 10000000 < student_number < 99999999:
            return 1
        if len(course_id) < 7:
            return 2
        return 0

   def add(self, student_number, course_id, name):
        check = self.validate_input(student_number, course_id)
        if check == 2:
            raise Exception('\nCourse ID: <7 Characters>')
        elif check == 1:
            raise Exception('\nStudent Number: <8 Digits>')
        else:
            self.database.add((student_number, course_id, name))
            
    def retrieve(self):
        print(self.database.min())
        self.database.del_min()
        
    def print_database(self):
        print (self.database)
        
    def main():

    #Storing information as pair
    record = StudentDatabase()
    record.add(662158453, 'DDF34S5', 'Shivani Ghodke')
    record.add(262158453, 'DS3TYS5', 'John Doe')
    record.add(662458453, 'DDF34G5', 'Hello World')
    record.add(602158453, 'DDF3D4S', 'Sam Cassel') 
    
    record.retrieve()
    record.print_database()

main()

https://github.com/shivigho14/Paul-liard/blob/master/ca1
